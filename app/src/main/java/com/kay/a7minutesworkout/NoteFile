DISPLAYING THE RECYCLER VIEW.
(1) CREATE AN ADAPTER OBJECT (global variable) set it to null.
-> now we can use this adapter to assign it to our RecyclerView as an adapter.

(2) Create a new function that will display the recyclerview to the bottom.
-> find the recyclerview and bind it and set the "layoutManager" to "LinearLayoutManager()"
-> we can now put the parameters. (this, LinearLayoutManager.Horizontal, false)

(3) use the exerciseAdapter object that we create and assign the ExerciseStatusAdapter() to it, which is the adapter class we have created.
-> passed in the exerciseList to the adapter, and force it to be not null (unwrapped it)

(4) now assign the adapter to the recycler view.
-> call the function from onCreate.
(You can run and test now)

(5) We might need to center it in XML.
-------------------------------------------------------------

CHANGE THE BACKGROUND COLOR ON THE EXERCISE WE ARE ON IN THE RECYCLERVIEW STATUS
(1) in Adapter (onBindViewHolder) use the when statement to call the ExerciseModel (we already have a model object above) to call the getIsSelected() and getIsCompleted() function to do something.
-> we also need an else block when both of them is inActive.
-> So we need to think what we need to change in those different statement.
-> in getIsSelected we want to change the tvItem background. use ContextCompat.getDrawable() to get the background color.
-> We need to pass in the context which if from "holder.itemView.context"
-> also pass in our color (item_circular_thin_color_accent_border)with R.drawable
-> also in getIsSelected we want to change the text color. use "setTextColor()
    -> pass in Color.parseColor()
    -> pass in the color value "#212121"

(2) we can now just move on to get is completed
-> just copy and paste from what we did in the getIsSelected
-> change the background now to item_circular_color_accent_background (The green background)
-> set the text color to white (#FFFFFF)

(3) copy and paste in else block to and change the background color to "item_circular_color_gray_background"

(4) Now we need to trigger this in exerciseFragment
-> Find the setRestProgressBar method
    -> inside onFinish method before the setupExerciseView() we should call the exerciseList (and unwrapped it) and find the [currentPosition] and set the IsSelected() to true.
    -> we also need to notify our Adapter that something have changed with the "notifyDataSetChanged()" method, so call this method with our "exerciseAdapter" object
-> find the setExerciseProgressBar() and inside onFinish we need to almost do the same.
    -> so inside onFinish before the if Statement. Do the same as before and put the setIsSelected() to false
    -> set the setIsCompleted to true with a new line.

    now we can test.

    SUMMARY -> we set the current exercise to white
    -> the finish exercise to green
    -> the Next Exercise to grey. (the one we haven't done yet)
-------------------------------------------------------------------------

CREATING THE FINISH FRAGMENT.
(1) set up the bindings in finish fragment.
(2) set up the action bar.
(3) set the navigation back
(4) bind the button and call the setOnClicklistener
    -> call the finish() inside the setOnClickListener.
(5) Find the setExerciseProgressBar() in ExerciseFragment
    -> inside the onFinish move the 3 lines that "triggers the adapter" inside the if statement, and before the setupRestView()
    -> in the else block delete the toast message and put in finish() method
    -> figure out how to navigate to the finishFragment
-----------------------------------------------------------------------------------

SETTING UP THE CUSTOM DIALOG FOR THE BACK BUTTON
(1) Create the layout.
(2) The ExerciseFragment is the place I want to implement the dialog box functionality.
(3) So instead of the navigation back method, we want to replace with our own function.
    -> create a new function and call it "customDialogForBackButton()"
    -> inside this body function we will first need to create a "customDialog" object which will just be a Dialog(this).
    -> we need to create a binding to this xml file, so create an object and call it "dialogBinding" which will be a  "DialogCustomBackConfirmationBinding.inflate(layoutInflater)"
    -> (now we can use this dialogBinding to get access to the items of it)
    -> now we need to give our customDialog a contentView (setContentView()) to make sure how it's gonna looks like
        -> We can pass in DialogBinding.root for making sure how it's looks like (So we just saying that customDialog should looks like our xml file which is our custom dialog box.)
    -> We want to make sure that if the user touch outside the dialog box, it would not be cancel, for that we can call setCanceledOnTouchOutside() with customDialog and put it to false.
    -> Now we can access the two buttons (dialogBinding.btn***) and put the setOnclickListener to both of them.
        -> in "yes" button we want to close the activity and call the dismiss() method from customDialog
        -> in "no" we can just dismiss the dialog box
    -> We might need to create override fun onBackPressed() and call the function from there

----------------------------------------------------------------------------------------
BMI Fragment
(1) Create a method that will validate our metric unit. (check if we have entered something or not.)
    -> let's call this function validateMetricUnits
    -> this function should return a Boolean
    -> create an object which we can call "isValid" and set it to true by default.
    -> get the value from our edit text view (etMetricUnitWeight) in an if statement and set the text to String and isEmpty method.
        -> so if it's empty. set the isValid to false.
    -> create an else if block and do the same with etMetricHeight
    -> now we want to return the result of this from isValid.
(2) create some calculation.
    -> in onCreate bind the button and add an onclickListener.
    -> we only want to calculate if validateMetricUnits return true (which is our function we just create)
    -> create and object and call it heightValue which will be a "type" float and our etMetricUnitHeight.
        -> get the text to String and set it toFloat (I don't think we need to get string first, but maybe to be sure?)
        -> Divide this to 100
    -> do the same to weight creating an object etg, but this time we are not going to divide it in 100.
    -> now we going to calculate the Bmi. Create an object and call it bmi which will be the bmi formula.
        -> calculation : [weight / (kg)] / height(cm) / height(cm) * 10.000 (we are going to use the meter version so we don't need to times it by 10.000)
        -> weight value / ( heightValue * heightValue )
    -> create an else block with a toast message "please enter valid values"
    -> before this else block we want to display the Bmi Results. let's create a function for that and call it displayBmiResult
        -> pass in a type float to the parameter (bmi: float)
        -> now we need to set the values
            -> create 2 objects: bmiLabel and bmiDescription which is a type string
            create an if statement and call the compareTo() method with with our bmi parameter object.
            -> pass if 15f in compareTo method. we need to check if it's lesser or equal to 15 with the value 0 ?
            -> then in this if body we want to set bmiLabel "Very severely underweight" and the bmiDescription to "Ops! you really need to take better care of yourself! eat more!"
        -> create an else if block. I don't understand this line so I will just write it down here ->(else if(bmi.compareTO(15f) > 0 && bmi.compareTo(16f) <=0)
        -> set the bmiLabel to "Severely underweight" and bmiDescription = "oops! you really need to take better care of yourself"
        -> else if its between 16f and 18.5f = "underweight"
        -> else if between 18f and 25f = "normal"
        -> else if over 25
-> set the linearLayout to visible inside this body function
-> bind the tvBmiValue and set the text to bmiValue.
    -> create an object bmiValue which will be a BigDecimal()
        -> pass in bmi.toDouble() ann call the setScale() with BigDecimal method
            -> pass in newScale: 2, RoundingMode.HALF_EVEN and convert it to String
    -> bind the tvBmiType to and set the text to bmiLabel
    -> and finally the tvBmiDescription text to bmiDescription
-> now we just need to call the function once we click on the buttons inside the if statement below and our objects
    -> we need to pass in the bmi when we call the function

---------------------------------------------------------------------------------------------------

FINALIZING THE BMI CALCULATOR WITH THE US SYSTEM
(1) we need to validate once again, but try first to put it in when statement.
    -> call this function validateUsUnits and this function is returning a Boolean.
    -> so use the when Statement to check if the textInput is empty. if empty set isValid to false. (we have created an object before the when statement)
    -> we are going to return isValid.
(2) now we need to do the calculation.
    -> Create this new function which we will call calculateUnits()
    -> we need to make a if statement which would check which current view we are on (currentVisible == Metric_units_view)
    -> copy and paste what we have from the button calculation.
    -> create an else block and do the same with validateUsUnits()
        -> so inside the if statement body we need an object which we will call usUnitHeightValue
            -> this is a type String which will be our etUsMetricUnitHeightFeet text to String.
            -> create next object which we will call usUnitValueInch which would be type string and set it to etUsMetricUnitHeightInch (basicly the same as the first object)
            -> create third object which would be the weight call it "usUnitWeightValue" which will be a type Float and would be our etUsMetricUnitWeight. also remember to set its text value to String.
                -> convert the last object to float.

    -> Now we have all the values, and will do some calculation
        -> create a new object and call this heightValue
            -> this will be our formula (usUnitHeightValue.toFloat() + usUnitHeightValueFeet.toFloat() * 12)
    -> create a new object which we will call bmi. this will be 703 * (usUnitWeightValue / (heightValue * heightValue))

    -> now we can display the the bmi with our displayBmiResult(bmi)

    -> create a new else block which will just be this Toast message that make us enter a valid value.

    -> now we can call this function in our btnCalculation











